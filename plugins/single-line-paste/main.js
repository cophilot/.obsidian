/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  GreekLetterModal: () => GreekLetterModal,
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon(
      "dice",
      "Sample Plugin",
      (evt) => {
        new import_obsidian.Notice("This is a notice!");
      }
    );
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    this.addCommand({
      id: "paste-single-line",
      name: "Paste single line",
      editorCallback: (editor, view) => {
        const clipboard = navigator.clipboard;
        clipboard.readText().then((text) => {
          const newText = text.replace(/\n/g, " ");
          editor.replaceRange(newText, editor.getCursor());
        }).catch((err) => {
          console.error(
            "Failed to read clipboard contents: ",
            err
          );
        });
      }
    });
    this.addCommand({
      id: "make-subscript",
      name: "Make Subscript",
      editorCallback: (editor, view) => {
        let selectedText = editor.getSelection();
        if (selectedText.length === 0) {
          editor.setSelection(
            {
              line: editor.getCursor().line,
              ch: editor.getCursor().ch - 1
            },
            editor.getCursor()
          );
          selectedText = editor.getSelection();
        }
        editor.replaceSelection(`<sub>${selectedText}</sub>`);
      }
    });
    this.addCommand({
      id: "make-superscript",
      name: "Make Superscript",
      editorCallback: (editor, view) => {
        let selectedText = editor.getSelection();
        if (selectedText.length === 0) {
          editor.setSelection(
            {
              line: editor.getCursor().line,
              ch: editor.getCursor().ch - 1
            },
            editor.getCursor()
          );
          selectedText = editor.getSelection();
        }
        editor.replaceSelection(`<sup>${selectedText}</sup>`);
      }
    });
    this.addCommand({
      id: "new-section",
      name: "Add new Section",
      editorCallback: (editor, view) => {
        editor.replaceRange("\n\n\n---\n", editor.getCursor());
      }
    });
    this.addCommand({
      id: "get-greek-letter",
      name: "Get Greek Letter",
      editorCallback: (editor, view) => {
        new GreekLetterModal(this.app, (result) => {
          editor.replaceRange(result, editor.getCursor());
        }).open();
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(
      window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3)
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText(
      (text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
        this.plugin.settings.mySetting = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
var GreekLetterModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.uppercase = false;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h1", { text: "Select a letter" });
    const letters = [
      {
        name: "Alpha",
        symbolUpper: "\u0391",
        symbolLower: "\u03B1"
      },
      {
        name: "Beta",
        symbolUpper: "\u0392",
        symbolLower: "\u03B2"
      },
      {
        name: "Gamma",
        symbolUpper: "\u0393",
        symbolLower: "\u03B3"
      },
      {
        name: "Delta",
        symbolUpper: "\u0394",
        symbolLower: "\u03B4"
      },
      {
        name: "Epsilon",
        symbolUpper: "\u0395",
        symbolLower: "\u03B5"
      },
      {
        name: "Zeta",
        symbolUpper: "\u0396",
        symbolLower: "\u03B6"
      },
      {
        name: "Eta",
        symbolUpper: "\u0397",
        symbolLower: "\u03B7"
      },
      {
        name: "Theta",
        symbolUpper: "\u0398",
        symbolLower: "\u03B8"
      },
      {
        name: "Iota",
        symbolUpper: "\u0399",
        symbolLower: "\u03B9"
      },
      {
        name: "Kappa",
        symbolUpper: "\u039A",
        symbolLower: "\u03BA"
      },
      {
        name: "Lambda",
        symbolUpper: "\u039B",
        symbolLower: "\u03BB"
      },
      {
        name: "Mu",
        symbolUpper: "\u039C",
        symbolLower: "\u03BC"
      },
      {
        name: "Nu",
        symbolUpper: "\u039D",
        symbolLower: "\u03BD"
      },
      {
        name: "Xi",
        symbolUpper: "\u039E",
        symbolLower: "\u03BE"
      },
      {
        name: "Omicron",
        symbolUpper: "\u039F",
        symbolLower: "\u03BF"
      },
      {
        name: "Pi",
        symbolUpper: "\u03A0",
        symbolLower: "\u03C0"
      },
      {
        name: "Rho",
        symbolUpper: "\u03A1",
        symbolLower: "\u03C1"
      },
      {
        name: "Sigma",
        symbolUpper: "\u03A3",
        symbolLower: "\u03C3"
      },
      {
        name: "Tau",
        symbolUpper: "\u03A4",
        symbolLower: "\u03C4"
      },
      {
        name: "Upsilon",
        symbolUpper: "\u03A5",
        symbolLower: "\u03C5"
      },
      {
        name: "Phi",
        symbolUpper: "\u03A6",
        symbolLower: "\u03C6"
      },
      {
        name: "Chi",
        symbolUpper: "\u03A7",
        symbolLower: "\u03C7"
      },
      {
        name: "Psi",
        symbolUpper: "\u03A8",
        symbolLower: "\u03C8"
      },
      {
        name: "Omega",
        symbolUpper: "\u03A9",
        symbolLower: "\u03C9"
      }
    ];
    new import_obsidian.Setting(contentEl).addButton(
      (btn) => btn.setButtonText(this.uppercase ? "Lowercase" : "Uppercase").setCta().onClick(() => {
        this.uppercase = !this.uppercase;
        this.onOpen();
      })
    );
    contentEl.createEl("div", {
      cls: "greek-letter-grid"
    });
    const gridEl = contentEl.lastChild;
    if (!gridEl) {
      console.error("gridEl is null");
      return;
    }
    letters.forEach((letter) => {
      new import_obsidian.Setting(gridEl).addButton(
        (btn) => btn.setButtonText(
          letter.name + " " + (this.uppercase ? letter.symbolUpper : letter.symbolLower)
        ).onClick(() => {
          this.close();
          this.onSubmit(
            this.uppercase ? letter.symbolUpper : letter.symbolLower
          );
        }).setClass("greek-letter-btn")
      );
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
